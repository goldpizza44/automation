;
; Static extension configuration file, used by
; the pbx_config module. This is where you configure all your 
; inbound and outbound calls in Asterisk. 
; 
; This configuration file is reloaded 
; - With the "extensions reload" command in the CLI
; - With the "reload" command (that reloads everything) in the CLI

;
; The "General" category is for certain variables.  
;
[general]
;
; If static is set to no, or omitted, then the pbx_config will rewrite
; this file when extensions are modified.  Remember that all comments
; made in the file will be lost when that happens. 
;
; XXX Not yet implemented XXX
;
static=yes
;
; if static=yes and writeprotect=no, you can save dialplan by
; CLI command 'save dialplan' too
;
writeprotect=no
;
; If autofallthrough is set, then if an extension runs out of
; things to do, it will terminate the call with BUSY, CONGESTION
; or HANGUP depending on Asterisk's best guess (strongly recommended).
;
; If autofallthrough is not set, then if an extension runs out of 
; things to do, asterisk will wait for a new extension to be dialed 
; (this is the original behavior of Asterisk 1.0 and earlier).
;
autofallthrough=yes
;
; If clearglobalvars is set, global variables will be cleared 
; and reparsed on an extensions reload, or Asterisk reload.
;
; If clearglobalvars is not set, then global variables will persist
; through reloads, and even if deleted from the extensions.conf or
; one of its included files, will remain set to the previous value.
;
clearglobalvars=no
;
; If priorityjumping is set to 'yes', then applications that support
; 'jumping' to a different priority based on the result of their operations
; will do so (this is backwards compatible behavior with pre-1.2 releases
; of Asterisk). Individual applications can also be requested to do this
; by passing a 'j' option in their arguments.
;
priorityjumping=no
;
; You can include other config files, use the #include command
; (without the ';'). Note that this is different from the "include" command
; that includes contexts within other contexts. The #include command works
; in all asterisk configuration files.
;#include "filename.conf"

; The "Globals" category contains global variables that can be referenced
; in the dialplan with ${VARIABLE} or ${ENV(VARIABLE)} for Environmental
; variables,
; ${${VARIABLE}} or ${text${VARIABLE}} or any hybrid
;
[globals]
;PSTN		= spa.uucp ;
; IP Address of the SPA-3000, change this to match your IP address
PSTN_GW         = SipuraSPA.goldfarbs.net:5061
PSTN            = SipuraSPA.goldfarbs.net:5061
;PSTN_GW         = 172.16.1.33:5061
;PSTN            = 172.16.1.33:5061
AREACODE        = 954

DEFAULT_VMAIL	= 2201
;DEFAULT_TO_RING=SIP/2201&SIP/2202
DEFAULT_TO_RING	= SIP/2201
#DEFAULT_TO_RING	= SIP/Pizza@pizza.goldfarbs.net

PHONE1		= SIP/2201          ; Extension to call as the main number
VMAIL1		= 2201              ; Main voice mail box
RINGS		= 20                ; Number of seconds to ring the phone (about 4 rings)

PHONE01		= SIP/2201	    ; Computer room desk phone
PHONE02		= SIP/2202	    ; Main Telephone
PHONE02		= SIP/2203	    ; Main Telephone
PHONE02		= SIP/2204	    ; Main Telephone


FILE		= lha/asterisk-recording

; Any category other than "General" and "Globals" represent 
; extension contexts, which are collections of extensions.  
;
; Extension names may be numbers, letters, or combinations
; thereof. If an extension name is prefixed by a '_'
; character, it is interpreted as a pattern rather than a
; literal.  In patterns, some characters have special meanings:
;
;   X - any digit from 0-9
;   Z - any digit from 1-9
;   N - any digit from 2-9
;   [1235-9] - any digit in the brackets (in this example, 1,2,3,5,6,7,8,9)
;   . - wildcard, matches anything remaining (e.g. _9011. matches 
;	anything starting with 9011 excluding 9011 itself)
;   ! - wildcard, causes the matching process to complete as soon as
;       it can unambiguously determine that no other matches are possible
;
; For example the extension _NXXXXXX would match normal 7 digit dialings, 
; while _1NXXNXXXXXX would represent an area code plus phone number
; preceeded by a one.
;
; Each step of an extension is ordered by priority, which must
; always start with 1 to be considered a valid extension.  The priority
; "next" or "n" means the previous priority plus one, regardless of whether
; the previous priority was associated with the current extension or not.
; The priority "same" or "s" means the same as the previously specified
; priority, again regardless of whether the previous entry was for the
; same extension.  Priorities may be immediately followed by a plus sign
; and another integer to add that amount (most useful with 's' or 'n').  
; Priorities may then also have an alias, or label, in 
; parenthesis after their name which can be used in goto situations
;
; Contexts contain several lines, one for each step of each
; extension, which can take one of two forms as listed below,
; with the first form being preferred.  One may include another
; context in the current one as well, optionally with a
; date and time.  Included contexts are included in the order
; they are listed.
;
;[context]
;exten => someexten,priority[+offset][(alias)],application(arg1,arg2,...)
;exten => someexten,priority[+offset][(alias)],application,arg1|arg2...
;
; Timing list for includes is 
;
;   <time range>|<days of week>|<days of month>|<months>
;
;include => daytime|9:00-17:00|mon-fri|*|*
;
; ignorepat can be used to instruct drivers to not cancel dialtone upon
; receipt of a particular pattern.  The most commonly used example is
; of course '9' like this:
;
;ignorepat => 9
;
; so that dialtone remains even after dialing a 9.
;


; =[ Notes ]==================================================================
; Asterisk is able to jump to different priorities based on the status
; returned from Dial(). Using the ${DIALSTATUS} local variable we can
; perform different actions based on the returned status
; message. Valid status messages include NOANSWER, BUSY,
; CHANISUNAVAIL, CONGESTION and ANSWER. We can modify our stdexten
; macro above to demonstrate how this works.

[macro-obnoxious];
  exten => s,1,NoOp(Starting Obnoxious Caller Filter)

; Zap the obnoxious callers looking for money
;  exten => s,n,GotoIf($["${CALLERID(num)}" = "9545317175"]?zapit)   ; David's Mobile for test

  exten => s,n,GotoIf($["${CALLERID(num):0:8}" = "95469276"]?zapit) ; Fraternal Order of Police (954)692-76xx
  exten => s,n,GotoIf($["${CALLERID(num)}" = "9546670314"]?zapit)   ; Fraternal Order of Police (954)667-0314

  exten => s,n,GotoIf($["${CALLERID(num)}" = "9545450728"]?zapit)   ; Republican Party          (954)545-0728
  exten => s,n,GotoIf($["${CALLERID(num)}" = "8552109463"]?zapit)   ; Herman Cain Party         (855)210-9463
  exten => s,n,GotoIf($["${CALLERID(num)}" = "8665109350"]?zapit)   ; GC Services(Collection agency)  (866)510-9350
  exten => s,n,GotoIf($["${CALLERID(num)}" = "9292240705"]?zapit)   ; Daily caller (2015/01/15 (929)224-0705
  exten => s,n,GotoIf($["${CALLERID(num)}" = "2027702263"]?zapit)   ; Republican Party          (202)770-2263 (2015/07/28)
  exten => s,n,GotoIf($["${CALLERID(num)}" = "5712106558"]?zapit)   ; Republican Party          (571)210-6558 (2015/07/28)
  exten => s,n,GotoIf($["${CALLERID(num)}" = "5163663233"]?zapit)   ; Chelsea Financial         (516)366-3233 (2015/07/28)
  exten => s,n,GotoIf($["${CALLERID(num)}" = "9542040254"]?zapit)   ; Fraternal Order of Police (954)204-0254 (2015/07/28)
                                                                    ; These are from Marco Rubios campaign...I think ...
  exten => s,n,GotoIf($["${CALLERID(num)}" = "3053075089"]?zapit)   ; Hangup Caller             (305)307-5089 (2016/01/21)
  exten => s,n,GotoIf($["${CALLERID(num)}" = "7863585146"]?zapit)   ; Hangup Caller             (786)358-5146 (2016/02/02)

  exten => s,n,MacroExit

  exten => s,n(zapit),Zapateller(answer)
  exten => s,n,SetAMAFlags(omit)
  exten => s,n,Hangup()

[macro-stdexten];
;   ${ARG1} - Extension  (we could have used ${MACRO_EXTEN} here as well
;   ${ARG2} - Device(s) to ring
;

  exten => s,1,NoOp(Starting stdexten)
  exten => s,n,Set(CALLERID(name)=${DB(cidname/${CALLERID(num)})})
  exten => s,n,NoOp(${CALLERID(name)})
  exten => s,n,Answer()

  exten => s,n,System(/usr/local/bin/sendToXBMC "${CALLERID(num)}" "${CALLERID(name)}")

; You can add callers to the "special_action" database to send them straight to voicemail
; they need to have an entry in the cidname database as well
;
; database put cidname "1234567890" "Some Name"
; database put special_action "Some Name" "voicemail"
;
; This next line checks to see if users should be relegated to voicemail:
  exten => s,n,GotoIf($["${DB(special_action/${CALLERID(name)})}" = "voicemail"]?straight_to_vm)  

; Do Distinctive ringing based on CallerID.  These callers always ring through
  exten => s,n,GotoIf($["${CALLERID(num):0:9}" = "954496098"]?ring3)
  exten => s,n,GotoIf($["${CALLERID(num):0:10}" = "9545317175"]?ring7m) ; David Mobile
  exten => s,n,GotoIf($["${CALLERID(num):0:10}" = "9544961064"]?ring7) ; Elena Mobile
  exten => s,n,GotoIf($["${CALLERID(num):0:6}" = "630979"]?ring2)      ; ALU
  exten => s,n,GotoIf($["${CALLERID(num):0:6}" = "630713"]?ring2)      ; ALU
  exten => s,n,GotoIf($["${CALLERID(num):0:6}" = "630224"]?ring2)      ; ALU
  exten => s,n,GotoIf($["${CALLERID(num):0:10}" = "9547558215"]?ring5) ; Maplewood Back Gate
  exten => s,n,GotoIf($["${CALLERID(num):0:10}" = "9547531840"]?ring5) ; Maplewood Front Gate

; We ask the caller to press 9, if they are not in our cidname database.  Weeds out machines
  exten => s,n,GotoIf(${DB_EXISTS(cidname/${CALLERID(num)})}?dial)
  exten => s,n,Goto(dialUnknown)

; Adding the Alert-Info: header for the SIPURA SPA to do special ringing
  exten => s,n(ring1),SIPAddHeader(Alert-Info: Bellcore-r1) ; 1 burst of 2 sec
  exten => s,n,Goto(dial)
  exten => s,n(ring2),SIPAddHeader(Alert-Info: Bellcore-r2) ; 1 burst of 1 sec, 1 burst of 2 sec, 1 burst of 1 sec
  exten => s,n,Goto(dial)
  exten => s,n(ring3),SIPAddHeader(Alert-Info: Bellcore-r3) ; 2 bursts of 2 sec
  exten => s,n,Goto(dial)
  exten => s,n(ring4),SIPAddHeader(Alert-Info: Bellcore-r4) ; 2 bursts of 1 sec followed by 2 sec
  exten => s,n,Goto(dial)
  exten => s,n(ring5),SIPAddHeader(Alert-Info: Bellcore-r5) ; 3 bursts of 1/2 sec followed by 2 sec 
  exten => s,n,Goto(dial)
  exten => s,n(ring6),SIPAddHeader(Alert-Info: Bellcore-r6) ; 3 bursts of 1 sec
  exten => s,n,Goto(dial)
  exten => s,n(ring7),SIPAddHeader(Alert-Info: Bellcore-r7) ; 3 bursts of 2 sec
  exten => s,n,Goto(dial)
  exten => s,n(ring7m),SIPAddHeader(Alert-Info: Bellcore-r7) ; 3 bursts of 2 sec
  exten => s,n,NoOp(dialMenu -- ${ARG2})
  exten => s,n,Goto(dialMenu)
  exten => s,n(ring8),SIPAddHeader(Alert-Info: Bellcore-r8) ; 1 burst of 1 sec 
  exten => s,n,Goto(dial)

; Provides David and Elena's cellphones the ability to do a menu
  exten => s,n(dialMenu),ringing
  exten => s,n(dialMenu),background(Press9toRingThrough)
  exten => s,n,WaitExten(10)
  exten => s,n,Goto(dial)

; Require Unknown Numbers to press 9
  exten => s,n(dialUnknown),ringing
  exten => s,n,NoOp(Unknown Caller...asking to Press 9)
  exten => s,n,background(Press9ifYouAreNotAComputer,m,,unknowndialthrough)
; fall through to voicemail

; Commented out...the background recording includes 10 secs of silence.
; WaitExten allowed callers to dial any extension...
;  exten => s,n,WaitExten(10)

; This target goes straight to voicemail
  exten => s,n(straight_to_vm),Voicemail(${ARG1},u)
  exten => s,n,Hangup()

  exten => s,n(dial),NoOp(Dial initiated)
;  exten => s,n,Read(dtmf,,,,,180)   ; Wait for user to press #.
;  exten => s,n,NoOp(dtmf=${dtmf})
; same => n,Goto(Lenny,talk,1)        ; Transfer to the talk extension in the Lenny context.

  exten => s,n,Set(_ORIGCHANNEL=${CHANNEL})

  exten => s,n,Dial(${ARG2},20,dw)             ; Ring the interface, 20 seconds maximum
;  exten => s,n,Dial(${ARG2},20,G(lenny^1))             ; Ring the interface, 20 seconds maximum

  exten => s,n,Goto(s-${DIALSTATUS},1)      ; Jump based on status (NOANSWER,BUSY,CHANUNAVAIL,CONGESTION,ANSWER)
  exten => s-NOANSWER,1,Voicemail(${ARG1},u) ; If unavailable, send to voicemail w/ unavail announce
  exten => s-NOANSWER,2,Goto(default,s,1)   ; If they press #, return to start

  exten => s-BUSY,1,Voicemail(${ARG1},b)     ; If busy, send to voicemail w/ busy announce
  exten => s-BUSY,2,Goto(default,s,1)       ; If they press #, return to start

  exten => _s-.,1,Goto(s-NOANSWER,1)        ; Treat anything else as no answer


; Begin Lenny stuff for the 'G' option to Dial
  exten => lenny,1,Goto(Lenny,talk,1)
  exten => lenny,2,Goto(homephone,1)

  exten => homephone,1,Bridge(${ORIGCHANNEL})



  exten => 1,1,VoicemailMain(${ARG1})       ; If they press 1 during answer, send the user into VoicemailMain
  exten => 2,1,Voicemail(${ARG1})           ; If they press 2 during answer, send the user to leave a message
  exten => 3,1,Voicemail(${ARG1})           ; If they press 2 during answer, send the user to leave a message

  exten => 7,1,Dial(IAX2/104891@voipms/8642149087) 
  exten => 7,n,Hangup()

  exten => 9,1,Macro(gametime,Nikita,status)
  exten => 9,2,Macro(gametime,Daniel,status)
  exten => 9,3,Macro(gametime,Alexander,status)
  exten => 9,n,Hangup()



;
; To call this macro you would use:
;  exten => 1234,1,Macro(stdexten,1234,sip/7960)
;
; We can assume that we are going to call the macro using the same
; example as above (exten => 1000,1,Macro(stdexten,SIP/1000)). Our
; first line of this macro example will Dial() SIP/1000 for 20
; seconds. After the Dial() command has completed the status of the
; call is saved in the variable ${DIALSTATUS}.
;
; On the second line we use a Goto() statement to jump to the
; associated extension. The format for the extension name is
; "s-${DIALSTATUS}" where ${DIALSTATUS} is equal to NOANSWER, BUSY,
; CHANISUNAVAIL, CONGESTION or ANSWER. If our Dial() command rings for
; 20 seconds without an answer, the ${DIALSTATUS} variable will
; contain NOANSWER. The s-NOANSWER extension will then execute all
; available priorities in order starting with the Voicemail() command
; (line 3) and play the unavailable message. The second priority of
; the s-NOANSWER extension will execute a Goto() statement if the user
; presses "#" before Voicemail hangs up the line. Similarily the busy
; voicemail message will be played if a ${DIALSTATUS} of BUSY is
; returned.
;
; The second last line of our macro is a catch all statement. The
; period (.) after the s- means to match anything that is returned. If
; neither NOANSWER or BUSY are returned, then we will assume a
; NOANSWER and execute the Goto() statement. This will send us to the
; s-NOANSWER extension, which as explained earlier, will execute
; Voicemail and play the busy message.
; ============================================================================

[macro-gametime]
;   ${ARG1} - Name
;   ${ARG2} - Action
  exten => s,1,Set(PlayTime=${CURL(http://localhost/cgi-bin/games.cgi?name=${ARG1}&action=${ARG2}&source=asterisk)})
  exten => s,n,PlayBack(${ARG1})
  exten => s,n,GotoIf($["${PlayTime:-5:5}" = "start"]?start:stop)
;  exten => s,n(start),PlayBack(${ARG1}_starts)
  exten => s,n(start),PlayBack(On_the_Clock)
  exten => s,n,Goto(macro-gametime,s,time)
;  exten => s,n(stop),PlayBack(${ARG1}_stops)
  exten => s,n(stop),PlayBack(Off_the_Clock)
  exten => s,n(time),SayNumber(${PlayTime:0:4})
  exten => s,n,PlayBack(minutes)
;  exten => s,n,wait(2)

[games]
; start/stop gametime logging
  exten => 22,1,Macro(gametime,Daniel,toggle)
  exten => 22,2,Hangup()

  exten => 52,1,Macro(gametime,Nikita,toggle)
  exten => 52,2,Hangup()

  exten => 60,1,Macro(gametime,Alexander,toggle)
  exten => 60,2,Hangup()

  exten => 99,1,Macro(gametime,Nikita,status)
  exten => 99,2,Macro(gametime,Daniel,status)
  exten => 99,3,Macro(gametime,Alexander,status)
  exten => 99,4,Hangup()

;  exten => 22,5,Festival(${PlayTime})


; Lenny is extension "talk"
[Lenny]
exten => talk,1,Set(i=${IF($["0${i}"="016"]?7:$[0${i}+1])})
 same  => n,ExecIf($[${i}=1]?MixMonitor(/var/www/html/Lenny/${UNIQUEID}.wav))
 same  => n,Playback(Lenny/Lenny${i})
 same  => n,BackgroundDetect(Lenny/backgroundnoise,1500)
exten => talk,2,NoOp(LennyTalk2)

[from-internal]

; =[ Notes ]==================================================================
;

exten => 2226,1,Dial(SIP/davidmobile,30)
exten => 552,1,Dial(SIP/Theatre,30)
exten => 553,1,Dial(SIP/Pizza,30)
exten => 554,1,Dial(Console/card1)
exten => 555,1,Dial(SIP/Kitchen,30)
exten => 556,1,Dial(IAX2/Laptop,30)
exten => kitchen,1,Dial(SIP/Kitchen,30)
exten => david,1,Dial(IAX2/Laptop,30)
exten => 557,1,Zapateller(answer|nocallerid)
exten => 557,2,VoiceMail()
exten => 557,99,Hangup
;exten => 558,1,Dial(SIP/08133986@sip.stanaphone.com)
; Marco van Zijl
exten => 558,1,Dial(SIP/08133986@sip.stanaphone.com)
exten => 559,1,Dial(SIP/08134546@sip.stanaphone.com)
exten => 561,1,Dial(IAX2/dave@voipsail.xs4all.nl/101)
exten => 562,1,Dial(IAX2/dave@voipsail.xs4all.nl/102)
exten => 560,1,Dial(IAX2/dave@voipsail.xs4all.nl/118)
exten => 564,1,Dial(IAX2/104891@voipms/9546637044)


;exten => _00.,1,Dial(IAX2/400@voipsail.xs4all.nl/${EXTEN:2})
;
;
exten => 565,1,Dial(Mobile/DavidBB/9543447326)
;
; Check if david's mobile is connected
exten => 563,1,MobileStatus(DavidBB,DAVIDCELL)

exten => 563,2,NoOp(${DAVIDCELL})
exten => 563,3,GotoIf($["${DAVIDCELL}" = "1"]?4:6)
exten => 563,4,PlayBack(On_the_Clock)
exten => 563,5,Hangup
exten => 563,6,PlayBack(Off_the_Clock)
exten => 563,99,Hangup
;
; exten => 555,2,VoiceMail2(u3278)
; exten => 555,3,Hangup
; exten => 555,102,Dial(SIP/2000,30) ; Unanswered = 103, Busy = 203
; exten => 555,103,VoiceMail2(u3278)
; exten => 555,104,Hangup
; exten => 555,203,Dial(SIP/3000,30) ; Unanswered = 204, Busy = 304
; exten => 555,204,Voicemail2(u3278)
; exten => 555,205,Hangup
; exten => 555,304,VoiceMail2(u3278)
; exten => 555,305,Hangup
;
; You just have to remember that BUSY or not-registered/not-available will 
; goto +101 in the priority of the extension.  Unanswered will goto +1 in 
; the priority of the extension.
; ============================================================================

; ==============================================================================
; Give voicemail at extension 2000
;
  exten => *1,1,VoicemailMain(s2201)
  exten => *1,n,Goto(*1,1)

; Extensions 2001 - 2004 are just extensions

; ==============================================================================
  exten => 2200,1,Dial(Console/card0)
  exten => 2201,1,Dial(sip/2201,20,)
  exten => 2201,2,voicemail(2201)
  exten => 2201,3,Hangup
  exten => 2201,102,voicemail(b2201)
  exten => 2201,103,Hangup
; exten => 2201,1,Macro(stdexten,2201,${PHONE1})

  exten => 2202,1,Macro(stdexten,2202,${PHONE2})
  exten => 2203,1,Macro(stdexten,2203,${PHONE3})
  exten => 2204,1,Macro(stdexten,2204,${PHONE4})

; Goto FreeWorldDialing
exten => _393.,1,SetCallerId,${FWDCIDNAME}
exten => _393.,2,Dial(IAX2/${FWDNUMBER}:${FWDPASSWORD}@iax2.fwdnet.net/${EXTEN:3},60,r)
exten => _393.,3,Congestion

; I recorded a answering machin message in gsm (sounds a little cheap)
; The directory is in /var/lib/asterisk/sounds/lha
;exten => 2222,1,Wait(6)
;exten => 2222,2,Playback(lha/mygreeting)
;exten => 2222,3,Macro(hangupcall)


include => games

include => to-pstn
include => to-voipms

; This is included from an external file
#include "ext_menus.conf"

; Some sample extensions.conf entries would look like the following.
;
; To issue commands to MisterHouse use the following.  This simply runs
; process_external_commands so anything you can normally do with the external
; commands in MisterHouse will work.  If you are expecting a response from
; MisterHouse use Response=yes otherwise use Response=no.  If you put yes and no
; response is received from misterhouse the script will have to timeout before
; moving to the proper priority in the extensions.conf file.

[misterhouse]
; MisterHouse commands
exten => 8000,1,Playback(/var/lib/asterisk/voice_menus/8000)
exten => 8001,1,AGI(MisterHouse.agi,"Command: Open the garage door Response=yes")
exten => 8002,1,AGI(MisterHouse.agi,"Command: Close the garage door Response=yes")
exten => 8003,1,AGI(MisterHouse.agi,"Command: Computer room ceiling fan toggle Respond=yes")
exten => 8004,1,AGI(MisterHouse.agi,"Command: Computer room ceiling fan on Response=yes")
exten => 8005,1,AGI(MisterHouse.agi,"Command: Computer room ceiling fan off Response=yes")

; For CallerID you can use something like the following.  I add the CallerID just
; before the Dial to which ever extension you are sending the caller to.  You can
; get creative here.  I just placed it there.

[inbound-home]
; When someone calls the home line they are directed through this.
  exten                   => fax,1,Dial(${FAX})
  exten                   => s,1,Zapateller(answer|nocallerid)	; Torture telemarketers
; If no Caller*ID is sent, PrivacyManager answers the channel and asks the
; caller to enter their 10 digit phone number
  exten                   => s,2,PrivacyManager
  exten                   => s,3,AGI(MisterHouse.agi,"CallerID")
  exten                   => s,4,Dial(${LINE1_INSIDE},20)
;  exten                   => s,5,Voicemail2(u2201)
  exten                   => s,5,Voicemail2(2201)
  exten                   => s,6,Hangup
  exten                   => s,105,Voicemail2(b2201)
  exten                   => s,106,Hangup

; For DTMF you can use something like the following.  This is placed in a macro
; that calls the different extensions but you can place it
; anywhere you have the code to call extensions.  The important thing here is the
; placement.  Notice the DTMF: ${MACRO_EXTEN} this is because when you are
; forwarded to a Macro your extension becomes s instead of the actual extension.
; 
; If you are not using Macros like this you can just have 'DTMF' instead of
; 'DTMF: ${MACRO_EXTEN}'
; 
[macro-oneline]
; Standard [extensions] dialing
  exten => s,1,Answer
  exten => s,2,AGI(MisterHouse.agi,"DTMF: ${MACRO_EXTEN}")
  exten => s,3,Dial(${ARG1},20)
  exten => s,4,Voicemail2(u${MACRO_EXTEN})
  exten => s,5,Hangup
  exten => s,104,Voicemail2(b${MACRO_EXTEN})
  exten => s,105,Hangup

; ----------------------------------------------------------------------------
[from-sip]
; [ Context 'from-sip' created by 'pbx_config' ]
;   '2201' =>         1. Macro(stdexten|SIP/2201)                   [pbx_config]
;   Include =>        'to-pstn'                                     [pbx_config]
; mozart*CLI>
; -= 1 extensions (1 priorities) in 1 contexts. =-
  exten => 2201,1,Macro(stdexten,SIP/2201)

; -[ Calls from the PSTN ]----------------------------------
[daytime]
  exten => s,1,Macro(stdexten,${DEFAULT_VMAIL},${DEFAULT_TO_RING})

[nighttime]
  exten => s,1,Voicemail(u${VMAIL1})	; unavailable, send to voicemail w/ unavail announce

[from-pstn]
;
; Timing list for includes is
;
;   <time range>|<days of week>|<days of month>|<months>
;
; include => daytime|9:00-17:00|mon-fri|*|*
;
;  include => daytime|8:00-22:59|*|*|*
;  include => nighttime|23:00-7:59|*|*|*


  exten => s,1,NoOp(${CALLERID(num)})

  exten => s,n,Macro(obnoxious)
  exten => s,n(ringit),NoOp(from-pstn)
  exten => s,n,Macro(stdexten,${DEFAULT_VMAIL},${DEFAULT_TO_RING})


  exten => 1,1,VoicemailMain(2201)          ; If they press 1, send the user into VoicemailMain
  exten => 2,1,Voicemail(${DEFAULT_TO_RING}); If they press 2 during answer, send the user to leave a message
  exten => 3,1,Dial(Console/card1)          ; If they press 3 during answer, send to Intercom

  exten => 4,1,Macro(gametime,Nikita,status)
  exten => 4,2,Macro(gametime,Daniel,status)
  exten => 4,3,Macro(gametime,Alexander,status)

  exten => 7,1,Dial(IAX2/104891@voipms/8642149087) 
  exten => 7,n,Hangup()

  exten => 8,1,Dial(IAX2/104891@voipms/01177252324607)
  exten => 8,n,Hangup()

  exten => 9,1,Dial(${DEFAULT_TO_RING},20,d)             ; Ring the interface, 20 seconds maximum
  exten => 9,n,Hangup()
  

;  include => daytime

; ----------------------------------------------------------------------------
; To dial out dial 1 and any number and the whole number becomes extension
; Problem, what about 911, 311, 411, 01..., 011...
; Things to dial:
;
;  > Yes, the dialplan for the fxs line can look like:
;  >  (*xx|[34569]11<:@gw0>|0|00|[2-9]xxxxxx<:@gw0>|1xxx[2-9]xxxxxxS0|xxxxxxxxxxxx.)
;     (*xx|[3469]11|0|00|[2-9]xxxxxx|2xxx|1xxx[2-9]xxxxxxS0|xxxxxxxxxxxx.) Mine
;  > where 911 is sent to gw0 (the fxo port),
;  > calls to Nxxxxxx (local calls) go to gw0,
;  > and 1+ calls (long distance) go to a voip box (* in my case)
;
;  [x]  2xxx -> in home extensions ([from-sip])
;
; ----------------------------------------------------------------------------

[macro-dial-pstn]
;  exten => s,1,Dial(${ARG1},,TW)
  exten => s,1,Dial(${ARG1})
  exten => s,2,Goto(s-${DIALSTATUS},1)          ; Jump based on status (NOANSWER,BUSY,CHANUNAVAIL,CONGESTION,ANSWER)

; We need reorder tones here
  exten => s-NOANSWER,1,Congestion()

; We need reorder tones here
  exten => s-BUSY,1,Congestion()

  exten => _s-.,1,Goto(s-NOANSWER,1)            ; Treat anything else as no answer

[to-pstn]
; ==============================================================================
; [ Context 'to-pstn' created by 'pbx_config' ]
;   '_0' =>           1. Macro(dial-pstn|SIP/${EXTEN}@${PSTN_GW})  [pbx_config]
;   '_00' =>          1. Macro(dial-pstn|SIP/${EXTEN}@${PSTN_GW})  [pbx_config]
;   '_01.' =>         1. Macro(dial-pstn|SIP/${EXTEN}@${PSTN_GW})  [pbx_config]
;   '_1N.' =>         1. Macro(dial-pstn|SIP/${EXTEN}@${PSTN_GW})  [pbx_config]
;   '_2201' =>        1. Macro(dial-extension|${PHONE1})           [pbx_config]
;   '_[2-79]11' =>    1. Macro(dial-pstn|SIP/${EXTEN}@${PSTN_GW})  [pbx_config]

;  [ ]  211 -> PSTN, ???
;  [ ]  311 -> PSTN, Emergency services ??? ([to-pstn])
;  [ ]  411 -> PSTN, Information operator ([to-pstn])
;  [ ]  511 -> PSTN, ???
;  [ ]  611 -> PSTN, ???
;  [ ]  711 -> PSTN, Relay Services ([to-pstn])
;  [ ]  911 -> PSTN, Emergency services ([to-pstn])
;
; exten => 211,1,Macro(dial-pstn,SIP/${EXTEN}@${PSTN_GW})
; exten => 311,1,Macro(dial-pstn,SIP/${EXTEN}@${PSTN_GW})
; exten => 411,1,Macro(dial-pstn,SIP/${EXTEN}@${PSTN_GW})
; exten => 511,1,Macro(dial-pstn,SIP/${EXTEN}@${PSTN_GW})
; exten => 611,1,Macro(dial-pstn,SIP/${EXTEN}@${PSTN_GW})
; exten => 711,1,Macro(dial-pstn,SIP/${EXTEN}@${PSTN_GW})
; exten => 911,1,Macro(dial-pstn,SIP/${EXTEN}@${PSTN_GW})
  exten => _[2-79]11,1,Macro(dial-pstn,SIP/${EXTEN}@${PSTN_GW}) ;

;  [ ]  Local Distance [2-9]xx-xxxx (but not 911) needs to become 1-732-xxx-xxxx
;       xxx-xxxx -> direct dial local (needs 1-732 added)
;  [x]  Long Distance 
;       1-xxx-xxx-xxxx -> direct dial long distance
;  [ ]  Operator Assisted Calls
;       01-Country_Code-City_Code-Telephone
;  [ ]  Direct Dial calls
;       011-Country_Code-City_Code-Telephone
;  exten => _0,1,Macro(dial-pstn,SIP/${EXTEN}@${PSTN_GW})	; Operator

; This is the extension that will route 1+ dialing 
;;;  exten => _1N.,1,Macro(dial-pstn,SIP/${EXTEN}@${PSTN_GW})	; Long Distance 11 Distance

;  exten => _00,1,Macro(dial-pstn,SIP/${EXTEN}@${PSTN_GW})	; International Operator 
;  exten => _01.,1,Macro(dial-pstn,SIP/${EXTEN}@${PSTN_GW})	; Operator assistance
; exten => _011.,1,PlayBack(Off_the_Clock)
; exten => _011.,1,Macro(dial-pstn,SIP/${EXTEN}@${PSTN_GW});
; ----------------------------------------------------------------------------
  exten => _2201,1,NoOp(WhyHere)
  exten => _2201,2,Macro(stdexten,${DEFAULT_VMAIL},${DEFAULT_TO_RING})
  exten => _2202,1,Macro(dial-extension,${PHONE2});
  exten => _2203,1,Macro(dial-extension,${PHONE3});
  exten => _2204,1,Macro(dial-extension,${PHONE4});

; Back to seven digit dialing...prepend 954 areacode.
;;;  exten => _NXXXXXX,1,Macro(dial-pstn,SIP/${AREACODE}${EXTEN}@${PSTN_GW});
  exten => 20,1,Macro(dial-pstn,SIP/9545317175@${PSTN_GW});

; eventually, I would like to get a list of exchanges which require
; 10 digit dialing
;;;  exten => _954NXXXXXX,1,Macro(dial-pstn,SIP/${EXTEN}@${PSTN_GW});
;;;  exten => _754NXXXXXX,1,Macro(dial-pstn,SIP/${EXTEN}@${PSTN_GW});
;;;  exten => _561NXXXXXX,1,Macro(dial-pstn,SIP/${EXTEN}@${PSTN_GW});
; This is the main 1+ dialing.
;  exten => _1NXXNXXXXXX,1,Macro(dial-pstn,SIP/${EXTEN}@${PSTN_GW});
  exten => _1900XXXXXXX!,1,PlayBack(tt-monkeys)
  exten => _1900XXXXXXX!,2,Hangup
  exten => _1809XXXXXXX!,1,PlayBack(tt-monkeys)
  exten => _1809XXXXXXX!,2,Hangup
; ============================================================================

[to-voipms]
exten => 571,1,Dial(IAX2/104891@voipms/*225)
exten => 571,n,Hangup()
exten => 4443,1,Dial(IAX2/104891@voipms/4443)
exten => 4443,n,Hangup()
exten => 4747,1,Dial(IAX2/104891@voipms/4747)
exten => 4747,n,Hangup()
exten => 15555550911,1,Dial(IAX2/104891@voipms/15555550911)
exten => 15555550911,n,Hangup()

; Elenas short codes to Kazakhstan
exten => 570,1,Dial(IAX2/104891@voipms/01177252324607)
exten => 570,n,Hangup()
exten => 572,1,Dial(IAX2/104891@voipms/01177272324462)
exten => 572,n,Hangup()

; Domestic USA dialing 1+ 10 digits
exten => _1NXXNXXXXXX,1,Dial(IAX2/104891@voipms/${EXTEN})
exten => _1NXXNXXXXXX,n,Hangup()
exten => _NXXNXXXXXX,1,Dial(IAX2/104891@voipms/1${EXTEN})
exten => _NXXNXXXXXX,n,Hangup()

; 10 digit dialing to South Florida Areacodes
;exten => _954NXXXXXX,1,Dial(IAX2/104891@voipms/1${EXTEN})
;exten => _954NXXXXXX,n,Hangup()
;exten => _754NXXXXXX,1,Dial(IAX2/104891@voipms/1${EXTEN})
;exten => _754NXXXXXX,n,Hangup()
;exten => _561NXXXXXX,1,Dial(IAX2/104891@voipms/1${EXTEN})
;exten => _561NXXXXXX,n,Hangup()

; 7 digit dialing to 954 areacode
exten => _NXXXXXX,1,Dial(IAX2/104891@voipms/1${AREACODE}${EXTEN});
exten => _NXXXXXX,n,Hangup()

exten => _011.,1,Dial(IAX2/104891@voipms/${EXTEN})
exten => _011.,n,Hangup()
exten => _00.,1,Dial(IAX2/104891@voipms/${EXTEN})
exten => _00.,n,Hangup()

[from-mobile]
 exten => s,1,Macro(stdexten,${DEFAULT_VMAIL},${DEFAULT_TO_RING})

[from-voipms]
 exten => 9543447748,1,Macro(obnoxious)
 exten => 9543447748,2,Macro(stdexten,${DEFAULT_VMAIL},${DEFAULT_TO_RING})
 exten => 9543447748,n,Hangup()

 exten => 9543447356,1,Macro(obnoxious)
 exten => 9543447356,2,Macro(stdexten,${DEFAULT_VMAIL},${DEFAULT_TO_RING})
 exten => 9543447356,n,Hangup()

 exten => 9543447326,1,Macro(obnoxious)
 exten => 9543447326,2,Macro(stdexten,${DEFAULT_VMAIL},${DEFAULT_TO_RING})
 exten => 9543447326,n,Hangup()

;These extensions can be pressed during Background()
  exten => 1,1,VoicemailMain(2201)          ; If they press 1, send the user into VoicemailMain
  exten => 2,1,Voicemail(${VMAIL1},u)        ; If they press 2 during answer, send the user to leave a message
  exten => 3,1,Dial(Console/card1)          ; If they press 3 during answer, send to Intercom

  exten => 4,1,Macro(gametime,Nikita,status)
  exten => 4,2,Macro(gametime,Daniel,status)
  exten => 4,3,Macro(gametime,Alexander,status)

  exten => 7,1,Dial(IAX2/104891@voipms/8642149087) 
  exten => 7,n,Hangup()

  exten => 8,1,Dial(IAX2/104891@voipms/01177252324607)
  exten => 8,n,Hangup()

  exten => 9,1,Dial(${DEFAULT_TO_RING},20,d)             ; Ring the interface, 20 seconds maximum
  exten => 9,n,Hangup()

; Context called by Background if user dials '9'
[unknowndialthrough]
 exten => 9,1,NoOp(${CALLERID(num)} Pressed 9...decide to add to DB)
 exten => 9,2,ringing
 exten => 9,3,Dial(${DEFAULT_TO_RING},20,d)             ; Ring the interface, 20 seconds maximum
 exten => 9,n,Hangup()

; I know why we need default but I don't know what is using default.
[default]
  exten => _2201,1,NoOp(WhyHere)
  exten => _2201,2,Macro(stdexten,${DEFAULT_VMAIL},${DEFAULT_TO_RING})
  include => from-pstn

